/******************************************************************

Stylesheet: Grid

******************************************************************/


@mixin grid_container( $type:'padded' ) {
	@if 'full' == $type {
		margin-left: -$gutter;
		margin-right: -$gutter;
		overflow: hidden;
		padding-top: $margin;
	}
	@else if 'overflow' == $type {
		overflow: hidden;
		> div {
			margin-left: -$gutter;
			margin-right: -$gutter;
			padding-top: $margin;
		}
	}
	@else {
		padding-left: $gutter;
		padding-right: $gutter;
		padding-top: $margin;
	}
}

/**
 * Add a classic grid column. This version does not use flexbox and is good for most uses
 *
 * @param int/string	$cols	The number of columns you want this exact column to span
 * @param int 			$total	The total number of columns in this row
 * @param int/string	$left	The number of columns you would like to add to the left of this column
 *                                    OR 'first' will designate this column as first
 *                                    OR 'last' will designate this column as last
 * @param int/string	$right	The number of columns you would like to add to the right of this column
 */
@mixin grid_col( $cols:'all', $total:12, $left:0, $right:0 ) {
	float: left;
	margin: 0 0 $margin;
	padding: 0 $gutter;

	@if 'all' == $cols {
		width: 100%;
	}
	@else if "large" == $cols
	{
		width: #{$grid_large}#{'%'};
		@if 0 < $right {
			margin-right: #{$grid_small}#{'%'};
		}
		@else if 0 < $left {
			margin-left: #{$grid_small}#{'%'};
		}
	}
	@else if "small" == $cols
	{
		width: #{$grid_small}#{'%'};
		@if 0 < $right {
			margin-right: #{$grid_large}#{'%'};
		}
		@else if 0 < $left {
			margin-left: #{$grid_large}#{'%'};
		}
	}
	@else {
		width: percentage($cols/$total);
		@if "first" == $left {
			clear: both;
			float: left;
			margin-right: auto;
		}
		@else if "last" != $left and 0 < $left {
			margin-left: percentage($left/$total);
		}

		@if "last" == $right or "last" == $left {
			float: right;
			margin-left: auto;
		}
		@else if "first" != $right and 0 < $right {
			margin-right: percentage($right/$total);
		}
	}
}

@mixin flex_grid( $cols:12, $full:true )
{
	display: flex;
	flex-flow: row wrap;

	@if false != $full {
		margin: 0 -$gutter;
	}
	@else {
		padding: 0 $gutter;
	}

	> * {
		display: flex;
		flex-basis: percentage(1/$cols);
		flex-direction: column;
		margin: 0 0 $margin;
		padding: 0 $gutter;

		&:first-child {
			margin-left: -1px;
		}
	}
}

@mixin flex_grid_col( $cols:1, $total:12, $left:0, $right:0 )
{
	@if "all" == $cols
	{
		flex-basis: 100%;
	}
	@else if "large" == $cols
	{
		flex-basis: #{$grid_large}#{'%'};
		@if 0 < $right {
			margin-right: #{$grid_small}#{'%'};
		}
		@else if 0 < $left {
			margin-left: #{$grid_small}#{'%'};
		}
	}
	@else if "small" == $cols
	{
		flex-basis: #{$grid_small}#{'%'};
		@if 0 < $right {
			margin-right: #{$grid_large}#{'%'};
		}
		@else if 0 < $left {
			margin-left: #{$grid_large}#{'%'};
		}
	}
	@else
	{
		flex-basis: percentage($cols/$total);
		@if "first" == $left {
			margin-right: auto;
		}
		@else if "last" != $left and 0 < $left {
			margin-left: percentage($left/$total);
		}

		@if "last" == $right or "last" == $left {
			margin-left: auto;
		}
		@else if "first" != $right and 0 < $right {
			margin-right: percentage($right/$total);
		}
	}
}

@mixin flex_grid_auto( $cols:false )
{
	display: flex;
	justify-content: space-between;
	flex-flow: row wrap;

	> * {
		display: flex;
		flex-basis: 100%;
		flex-direction: column;
		flex-grow: 0;
		margin: 0 0 $margin;

		@if 1 == $cols
		{
			flex-basis: 100%;
			flex-grow: 0;
			margin: 0 0 $margin;
		}
		@else if $cols
		{
			flex-basis: calc(#{percentage(1/$cols)} - #{$gutter*2});
			flex-grow: 1;
			margin-bottom: $margin;
			&:nth-child(n) {
				margin-left: $gutter;
				margin-right: $gutter;
			}
			&:nth-child(#{$cols}n+#{$cols}) {
				margin-left: $gutter;
				margin-right: 0;
			}
			&:nth-child(#{$cols}n+1) {
				margin-left: 0;
				margin-right: $gutter;
			}
			&:last-child {
				margin-right: 0;
			}
		}
		@else
		{
			flex-basis: 0;
			flex-grow: 1;
			margin-bottom: $margin;
			&:nth-child(n) {
				margin-left: $gutter;
				margin-right: $gutter;
			}

			&:first-child {
				margin-left: 0;
			}
			&:last-child {
				margin-right: 0;
			}
		}
	}
}